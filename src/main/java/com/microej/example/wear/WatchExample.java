/*
 *  Java
 *
 *  Copyright 2022 MicroEJ Corp. All rights reserved._
 *  Use of this source code is governed by a BSD-style license that can be found with this software.
 *
 */
package com.microej.example.wear;

import ej.bon.Immutables;
import ej.bon.Util;
import ej.microui.MicroUI;
import ej.microui.display.Colors;
import ej.microui.display.Font;
import ej.microui.display.Image;
import ej.microui.event.Event;
import ej.microui.event.generator.Command;
import ej.mwt.Desktop;
import ej.mwt.Widget;
import ej.mwt.event.EventDispatcher;
import ej.mwt.event.PointerEventDispatcher;
import ej.mwt.style.EditableStyle;
import ej.mwt.style.background.ImageBackground;
import ej.mwt.style.background.NoBackground;
import ej.mwt.style.background.RectangularBackground;
import ej.mwt.style.outline.FlexibleOutline;
import ej.mwt.stylesheet.Stylesheet;
import ej.mwt.stylesheet.cascading.CascadingStylesheet;
import ej.mwt.stylesheet.selector.TypeSelector;
import ej.mwt.util.Alignment;

/**
 * An example of a simple watch application that displays an analog watchface and an application list.
 */
public class WatchExample {

	/** An array containing the names of the watch applications, loaded from file <code>application_names.xml</code>. */
	private static final String[] APPLICATIONS_NAMES = (String[]) Immutables.get("applicationNames"); //$NON-NLS-1$

	/**
	 * An array containing the path to the icons for the watch applications, loaded from file
	 * <code>application_icons.xml</code>.
	 */
	private static final String[] APPLICATIONS_ICONS = (String[]) Immutables.get("applicationIcons"); //$NON-NLS-1$

	/** Arbitrary time (in milliseconds since Epoch) for the example purposes. */
	private static final int SOME_DATE = 1648474804;

	/** Style options */

	private static final int APPLICATION_BOTTOM_PADDING = 50;

	private static final int LIST_ITEM_VERTICAL_SPACING = 20;

	private static final float LIST_ITEM_SPLIT_RATIO = 0.425f;

	private static final int LIST_LEFT_PADDING = 30;

	private static final String ROBOTO_FONT = "/fonts/RobotoCondensedRegular-35px.ejf"; //$NON-NLS-1$

	private static Desktop desktop;

	private static int currentPosition;

	/**
	 * Entry point of the application.
	 *
	 * @param args
	 *            command line arguments.
	 */
	public static void main(String[] args) {
		// Start MicroUI framework.
		MicroUI.start();

		// set an arbitrary date for the purposes of this example
		Util.setCurrentTimeMillis(SOME_DATE);

		// initialize selected position in the application list
		currentPosition = 0;

		// create the desktop and set the watchface as its root widget
		desktop = createDesktop();
		desktop.setWidget(new Watchface());

		// show the desktop on the display
		desktop.requestShow();
	}

	/**
	 * Shows the given widget on the desktop.
	 *
	 * @param widget
	 *            the widget to show.
	 */
	public static void show(Widget widget) {
		// set the given widget as the root widget of the desktop
		desktop.setWidget(widget);
		// request the desktop to lay out its new widget hierarchy
		desktop.requestLayOut();
	}

	/**
	 * Shows the watchface.
	 */
	public static void showWatchface() {
		show(new Watchface());
	}

	/**
	 * Shows the application list.
	 */
	public static void showApplicationList() {
		show(createApplicationList());
	}

	/**
	 * Sets the current position in the application list.
	 *
	 * @param position
	 *            the current position.
	 */
	public static void setCurrentPosition(int position) {
		currentPosition = position;
	}

	private static Desktop createDesktop() {
		final Desktop desktop = new Desktop() {
			@Override
			protected EventDispatcher createEventDispatcher() {
				return newEventDispatcher(this);
			}
		};

		desktop.setStylesheet(createStylesheet());
		return desktop;
	}

	/**
	 * Creates an event dispatcher that can dispatch the pointer events sent by the touch screen and the command events
	 * sent by the physical button.
	 *
	 * @param desktop
	 *            the desktop to bound the event dispatch to.
	 * @return a new event dispatcher.
	 */
	private static EventDispatcher newEventDispatcher(final Desktop desktop) {
		return new PointerEventDispatcher(desktop) {

			@Override
			public boolean dispatchEvent(int event) {
				// dispatch the events generated by the physical button to the root widget of the desktop
				if (Event.getType(event) == Command.EVENT_TYPE) {
					return desktop.getWidget().handleEvent(event);
				}

				// dispatch other events (including pointer events)
				return super.dispatchEvent(event);
			}
		};
	}

	/**
	 * Sets the style attributes of the widgets in this application (watchface, application list).
	 *
	 * @return
	 */
	private static Stylesheet createStylesheet() {
		CascadingStylesheet stylesheet = new CascadingStylesheet();

		EditableStyle style = stylesheet.getDefaultStyle();
		style.setBackground(NoBackground.NO_BACKGROUND);

		// define the style of the watchface
		style = stylesheet.getSelectorStyle(new TypeSelector(Watchface.class));
		style.setBackground(new ImageBackground(Image.getImage("/images/watchface/background.png"))); //$NON-NLS-1$

		// define the style of the application list
		style = stylesheet.getSelectorStyle(new TypeSelector(ApplicationList.class));
		style.setBackground(new RectangularBackground(Colors.BLACK));

		// define the style of the items of the application list
		style = stylesheet.getSelectorStyle(new TypeSelector(ApplicationListItem.class));
		style.setColor(0xbbbbbb);
		style.setPadding(new FlexibleOutline(0, 0, 0, LIST_LEFT_PADDING));
		style.setBackground(NoBackground.NO_BACKGROUND);
		style.setHorizontalAlignment(Alignment.LEFT);
		style.setVerticalAlignment(Alignment.VCENTER);
		style.setFont(Font.getFont(ROBOTO_FONT));
		style.setExtraFloat(ApplicationListItem.SPLIT_RATIO_STYLE, LIST_ITEM_SPLIT_RATIO);
		style.setExtraInt(ApplicationListItem.SPACING_STYLE, LIST_ITEM_VERTICAL_SPACING);

		// define the style of the stub application
		style = stylesheet.getSelectorStyle(new TypeSelector(StubApplication.class));
		style.setColor(Colors.WHITE);
		style.setBackground(new RectangularBackground(Colors.BLACK));
		style.setFont(Font.getFont(ROBOTO_FONT));
		style.setPadding(new FlexibleOutline(0, 0, APPLICATION_BOTTOM_PADDING, 0));

		return stylesheet;
	}

	/**
	 * Creates the application list and populates it with stub application items.
	 *
	 * @return a widget that represents an application list.
	 */
	private static Widget createApplicationList() {
		ApplicationList list = new ApplicationList(currentPosition);

		// populate the list with application icons and names
		int applicationsCount = APPLICATIONS_NAMES.length;
		for (int i = 0; i < applicationsCount; i++) {
			ApplicationListItem applicationListItem = new ApplicationListItem(APPLICATIONS_ICONS[i],
					APPLICATIONS_NAMES[i]);
			list.addListItem(applicationListItem);
		}

		return list;
	}

}
